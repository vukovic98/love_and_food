package rules;

import java.time.LocalDate;
import java.util.List;

import com.ftn.uns.ac.rs.love_and_food.model.PersonalityAnswer;
import com.ftn.uns.ac.rs.love_and_food.model.User;
import com.ftn.uns.ac.rs.love_and_food.model.Match;
import com.ftn.uns.ac.rs.love_and_food.model.enums.Education;

global Long loggedInUserId;
global User soulmate;

declare PartnerCompatibility
	@PropertyReactive
	
	mateId: long
	traitsScore: double
	smokingScore: double
	alchocolScore: double
	educationScore: double
	incomeScore: double
	religionScore: double
	ratingScore: double
end

declare FoundSoulmate
end

rule "Soulmate"
	agenda-group "soulmate"
	salience ($smoking + $alchocol + $education + $income + $religion + $trait)
	when
		$u: User( id == loggedInUserId )
		$mate: PartnerCompatibility( $mateId : mateId, 
			$smoking : smokingScore, $alchocol : alchocolScore, 
			$education: educationScore, $trait: traitsScore,
			$income: incomeScore, $religion: religionScore,
			$rating: ratingScore)
		$soulmate: User( id == $mateId )
		not FoundSoulmate( )
	then
		System.out.println("Found soulmate for " + $u.getId() + " is " + $mateId);
		System.out.println("Smoking score " + $smoking);
		System.out.println("Alchocol score " + $alchocol);
		System.out.println("Education score " + $education);
		System.out.println("Income score " + $income);
		System.out.println("Religion score " + $religion);
		System.out.println("Traits score " + $trait);
		System.out.println("Rating score " + $rating);
		drools.getKnowledgeRuntime().setGlobal("soulmate", $soulmate);
		insert(new FoundSoulmate());
end;

rule "Compatibility - filters"
	agenda-group "prepare-soulmate"
	salience 2
	when
		$u: User( id == loggedInUserId )
		$ur: PartnerRequirements( userId == loggedInUserId )
		$mate: User( id != loggedInUserId, 
			gender == $ur.prefferedGender,
			$ur.suitableAge contains $mate.ageGroup,
			desiredRelationship == $ur.desiredRelationship,
			children == $ur.children )
	then
		System.out.println("Compatibile mate with id: " + $mate.getId());
		insert(new PartnerCompatibility($mate.getId(), -1, -1, 0, 0, 0, -1, 0));
end;

rule "Compatibility - traits"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $userTraits: personalityTraits )
		$userMate: User( id != loggedInUserId, $mateId : id, $mateTraits: personalityTraits)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!traitsScore)
		Number($count: intValue > 0) from accumulate(
			String($userTrait: this) from $userTraits.split("") and
			String(this == $userTrait) from $mateTraits.split(""),
			count($userTrait)
		)
	then
		System.out.println("Added score for traits for mate: " + $mateId);
		modify($compatibleMate){setTraitsScore($count);};
end;

rule "Compatibility - very bad rating"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $userTraits: personalityTraits )
		$userMate: User( id != loggedInUserId, $mateId : id, $mateTraits: personalityTraits)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!ratingScore)
		$matchRatings: List(size > 0) from collect(
			Match(soulmate.id == $mateId,
			$matchDate: matchDate, $matchDate.isAfter(LocalDate.now().minusMonths(3)))
		)
		Number($count: intValue >= 5) from accumulate(
			Match($match : this, rating == 1) from $matchRatings,
			count($match)
		)
	then
		System.out.println($matchRatings);
		System.out.println("Added score for very bad ratings in the past 3 months for mate: " + $mateId);
		modify($compatibleMate){setRatingScore($compatibleMate.getRatingScore() + 3 * (-$count));};
end;

rule "Compatibility - bad rating"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $userTraits: personalityTraits )
		$userMate: User( id != loggedInUserId, $mateId : id, $mateTraits: personalityTraits)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!ratingScore)
		$matchRatings: List(size > 0) from collect(
			Match(soulmate.id == $mateId,
			$matchDate: matchDate, $matchDate.isAfter(LocalDate.now().minusMonths(3)))
		)
		Number($count: intValue >= 5) from accumulate(
			Match($match : this, rating == 2) from $matchRatings,
			count($match)
		)
	then
		System.out.println($matchRatings);
		System.out.println("Added score for bad ratings in the past 3 months for mate: " + $mateId);
		modify($compatibleMate){setRatingScore($compatibleMate.getRatingScore() + 1 * (-$count));};
end;

rule "Compatibility - same education"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $education: education )
		$userMate: User( id != loggedInUserId, $mateId : id, education == $education )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(3);};
end;

rule "Compatibility - one below education"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $education: education )
		$userMate: User( id != loggedInUserId, $mateId : id, education.getValue() == $education.getValue() - 1)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(1);};
end;

rule "Compatibility - one above education"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $education: education )
		$userMate: User( id != loggedInUserId, $mateId : id, education.getValue() == $education.getValue() + 1)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for one above education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(2);};
end;

rule "Compatibility - smoking"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $smoking: smoking )
		$userMate: User( id != loggedInUserId, $mateId : id, smoking == $smoking )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!smokingScore)
	then
		System.out.println("Added score for smoking compatibility for mate: " + $mateId);
		modify($compatibleMate){setSmokingScore(5);};
end;

rule "Compatibility - same income"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $income: income )
		$userMate: User( id != loggedInUserId, $mateId : id, income.getValue() == $income.getValue())
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!incomeScore)
	then
		System.out.println("Added score for same income compatibility for mate: " + $mateId);
		modify($compatibleMate){setIncomeScore(1);};
end;

rule "Compatibility - one above income"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $income: income )
		$userMate: User( id != loggedInUserId, $mateId : id, income.getValue() == $income.getValue() + 1)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!incomeScore)
	then
		System.out.println("Added score for one above income compatibility for mate: " + $mateId);
		modify($compatibleMate){setIncomeScore(1);};
end;


rule "Compatibility - same religion opinions"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $religion: religion )
		$userMate: User( id != loggedInUserId, $mateId : id, religion == $religion )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!religionScore)
	then
		System.out.println("Added score for same religion compatibility for mate: " + $mateId);
		modify($compatibleMate){setReligionScore(2);};
end;

rule "Compatibility - alchocol"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: User( id == loggedInUserId, $alchocol: alchocol )
		$userMate: User( id != loggedInUserId, $mateId : id, alchocol == $alchocol )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!alchocolScore)
	then
		System.out.println("Added score for alchocol compatibility for mate: " + $mateId);
		modify($compatibleMate){setAlchocolScore(2);};
end;

rule "Change focus to soulmate"
	agenda-group "prepare-soulmate"
	salience -1
	when
		PartnerCompatibility() 
	then
		System.out.println("Focus group changed to soulmate.");
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("soulmate").setFocus();
end;
