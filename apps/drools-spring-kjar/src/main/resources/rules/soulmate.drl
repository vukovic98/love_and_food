package rules;

import com.ftn.uns.ac.rs.love_and_food.model.PersonalityAnswer;
import com.ftn.uns.ac.rs.love_and_food.model.RegisteredUser;
import com.ftn.uns.ac.rs.love_and_food.model.enums.Education;

global Long loggedInUserId;
global RegisteredUser soulmate;

declare PartnerCompatibility
	@PropertyReactive
	
	mateId: long
	traitsScore: double
	smokingScore: double
	alchocolScore: double
	educationScore: double
end

declare FoundSoulmate
end

rule "Soulmate"
	agenda-group "soulmate"
	salience ($smoking + $alchocol + $education + $trait)
	when
		$u: RegisteredUser( id == loggedInUserId )
		$mate: PartnerCompatibility( $mateId : mateId, 
		$smoking : smokingScore, $alchocol : alchocolScore, $education: educationScore, $trait: traitsScore )
		$soulmate: RegisteredUser( id == $mateId )
		not FoundSoulmate( )
	then
		System.out.println("Izvrseno soulmate pravilo " + $u.getId());
		System.out.println("nadjen " + $mateId);
		System.out.println("smoking " + $smoking);
		System.out.println("alchocol " + $alchocol);
		System.out.println("education " + $education);
		System.out.println("traits " + $trait);
		drools.getKnowledgeRuntime().setGlobal("soulmate", $soulmate);
		insert(new FoundSoulmate());
end;

rule "Compatibility - filters"
	agenda-group "prepare-soulmate"
	salience 2
	when
		$u: RegisteredUser( id == loggedInUserId )
		$ur: PartnerRequirements( userId == loggedInUserId )
		$mate: RegisteredUser( id != loggedInUserId, 
			gender == $ur.prefferedGender,
			$ur.suitableAge contains $mate.ageGroup,
			desiredRelationship == $ur.desiredRelationship,
			children == $ur.children )
	then
		System.out.println("Compatibile mate with id: " + $mate.getId());
		insert(new PartnerCompatibility($mate.getId(), -1, -1, 0, 0));
end;

rule "Compatibility - traits"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: RegisteredUser( id == loggedInUserId, $userTraits: personalityTraits )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, $mateTraits: personalityTraits)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!traitsScore)
		Number($count: intValue > 0) from accumulate(
			String($userTrait: this) from $userTraits.split("") and
			String(this == $userTrait) from $mateTraits.split(""),
			count($userTrait)
		)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setTraitsScore($count);};
end;

rule "Compatibility - smoking"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: RegisteredUser( id == loggedInUserId, $smoking: smoking )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, smoking == $smoking )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!smokingScore)
	then
		System.out.println("Added score for smoking compatibility for mate: " + $mateId);
		modify($compatibleMate){setSmokingScore(5);};
end;

rule "Compatibility - alchocol"
	agenda-group "prepare-soulmate"
	salience 1
	when
		$u: RegisteredUser( id == loggedInUserId, $alchocol: alchocol )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, alchocol == $alchocol )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!alchocolScore)
	then
		System.out.println("Added score for alchocol compatibility for mate: " + $mateId);
		modify($compatibleMate){setAlchocolScore(2);};
end;

rule "Compatibility - same education"
	agenda-group "prepare-soulmate"
	salience 0
	when
		$u: RegisteredUser( id == loggedInUserId, $education: education )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, education == $education )
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(3);};
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("soulmate").setFocus();
end;

rule "Compatibility - one below education"
	agenda-group "prepare-soulmate"
	salience 0
	when
		$u: RegisteredUser( id == loggedInUserId, $education: education )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, education.getValue() == $education.getValue() - 1)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(1);};
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("soulmate").setFocus();
end;

rule "Compatibility - one above education"
	agenda-group "prepare-soulmate"
	salience 0
	when
		$u: RegisteredUser( id == loggedInUserId, $education: education )
		$userMate: RegisteredUser( id != loggedInUserId, $mateId : id, education.getValue() == $education.getValue() + 1)
		$compatibleMate: PartnerCompatibility( mateId == $mateId ) @Watch(!educationScore)
	then
		System.out.println("Added score for same education compatibility for mate: " + $mateId);
		modify($compatibleMate){setEducationScore(2);};
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("soulmate").setFocus();
end;
