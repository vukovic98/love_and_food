template header
ambientPoints
smokingPoints
alcoholPoints
dateTimePoints
distancePoints
priceRangePoints
musicPoints
cuisinePoints
gardenPoints
parkingPoints
tvPoints
wifiPoints
baseAmbientPoints
baseSmokingPoints
baseAlcoholPoints
baseDateTimePoints
baseDistancePoints
basePriceRangePoints
baseMusicPoints
baseCuisinePoints
baseGardenPoints
baseParkingPoints
baseTvPoints
baseWifiPoints

package rules;

import com.ftn.uns.ac.rs.love_and_food.model.Restaurant;
import com.ftn.uns.ac.rs.love_and_food.model.User;
import com.ftn.uns.ac.rs.love_and_food.model.Grade;
import com.ftn.uns.ac.rs.love_and_food.model.RestaurantRequirements;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


global Long loggedInUserId;

declare RestaurantCompatibility
	restaurantId: long
end

declare RestaurantAmbient
	restaurantId: long
	ambientScore: double
end

declare RestaurantSmoking
	restaurantId: long
	smokingScore: double
end

declare RestaurantAlcohol
	restaurantId: long
	alcoholScore: double
end

declare RestaurantTime
	restaurantId: long
	dateTimeScore: double
end

declare RestaurantDistance
	restaurantId: long
	distanceScore: double
end

declare RestaurantPriceRange
	restaurantId: long
	priceRangeScore: double
end

declare RestaurantMusic
	restaurantId: long
	musicScore: double
end

declare RestaurantCuisine
	restaurantId: long
	cuisineScore: double
end

declare RestaurantGarden
	restaurantId: long
	gardenScore: double
end

declare RestaurantParking
	restaurantId: long
	parkingScore: double
end

declare RestaurantTV
	restaurantId: long
	tvScore: double
end

declare RestaurantWiFi
	restaurantId: long
	wifiScore: double
end

declare RestaurantGrade
	restaurantId: long
	gradeScore: double
end

template "perfect-restaurant-rules"

rule "Compatibility - creating requirement objects"
	agenda-group "perfect-restaurant"
	salience 2
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $dateTime: dateTime )
		$potential: Restaurant()
		 eval($potential.isOpen($req.getDateTime()) == true )
	then
		System.out.println("Compatibile restaurant with id: " + $potential.getRestaurant_id());
		insert(new RestaurantCompatibility($potential.getRestaurant_id()));
end;

rule "Compatibility - ambient"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_ambient: ambient )
		$restaurant: Restaurant( $rest_id: restaurant_id, ambient == $req_ambient )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for ambient compatibility for restaurant: " + $rest_id);
		insert(new RestaurantAmbient($rest_id, @{ambientPoints}));
end;

rule "Compatibility - smoking preference"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_smoking: smokingArea )
		$restaurant: Restaurant( $rest_id: restaurant_id, smokingArea == $req_smoking )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for smoking area compatibility for restaurant: " + $rest_id);
		insert(new RestaurantSmoking($rest_id, @{smokingPoints}));
end;

rule "Compatibility - alcohol"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_alcohol: alcohol )
		$restaurant: Restaurant( $rest_id: restaurant_id, alcohol == $req_alcohol )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for alcohol compatibility for restaurant: " + $rest_id);
		insert(new RestaurantAlcohol($rest_id, @{alcoholPoints}));
end;

rule "Compatibility - price range - CHEEP"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, priceRange == PriceRange.CHEEP )
		$restaurant: Restaurant( $rest_id: restaurant_id, priceRange == PriceRange.CHEEP || priceRange == PriceRange.AFFORDABLE )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for price range compatibility for restaurant: " + $rest_id);
		insert(new RestaurantPriceRange($rest_id, @{priceRangePoints}));
end;

rule "Compatibility - price range - AFFORDABLE"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, priceRange == PriceRange.AFFORDABLE )
		$restaurant: Restaurant( $rest_id: restaurant_id, priceRange == PriceRange.CHEEP || priceRange == PriceRange.AFFORDABLE )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for price range compatibility for restaurant: " + $rest_id);
		insert(new RestaurantPriceRange($rest_id, @{priceRangePoints}));
end;

rule "Compatibility - price range - EXPENSIVE"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, priceRange == PriceRange.EXPENSIVE )
		$restaurant: Restaurant( $rest_id: restaurant_id )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for price range compatibility for restaurant: " + $rest_id);
		insert(new RestaurantPriceRange($rest_id, @{priceRangePoints}));
end;

rule "Compatibility - music"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_music: music )
		$restaurant: Restaurant( $rest_id: restaurant_id, music == $req_music )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for music compatibility for restaurant: " + $rest_id);
		insert(new RestaurantMusic($rest_id, @{musicPoints}));
end;

rule "Compatibility - cuisine"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_cuisine: cuisine )
		$restaurant: Restaurant( $rest_id: restaurant_id, $req_cuisine memberOf cuisine )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for cuisine compatibility for restaurant: " + $rest_id);
		insert(new RestaurantCuisine($rest_id, @{cuisinePoints}));
end;

rule "Compatibility - garden"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, $req_garden: garden )
		$restaurant: Restaurant( $rest_id: restaurant_id, garden == $req_garden )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for garden compatibility for restaurant: " + $rest_id);
		insert(new RestaurantGarden($rest_id, @{gardenPoints}));
end;

rule "Compatibility - parking"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, parking == true )
		$restaurant: Restaurant( $rest_id: restaurant_id, parking == true )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for parking compatibility for restaurant: " + $rest_id);
		insert(new RestaurantParking($rest_id, @{parkingPoints}));
end;

rule "Compatibility - tv"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, tv == true )
		$restaurant: Restaurant( $rest_id: restaurant_id, tv == true )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for tv compatibility for restaurant: " + $rest_id);
		insert(new RestaurantTV($rest_id, @{tvPoints}));
end;

rule "Compatibility - WiFi"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId, wifi == true )
		$restaurant: Restaurant( $rest_id: restaurant_id, wifi == true )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for WiFi compatibility for restaurant: " + $rest_id);
		insert(new RestaurantWiFi($rest_id, @{wifiPoints}));
end;

rule "Compatibility - Grade of Restaurant"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$restaurant: Restaurant( $rest_id: restaurant_id, $grades: grades )
		$total : Double() from accumulate(
         Grade( $loc : location_grade, $amb: ambient_grade, $hos: hospitability_grade, $ser: service_grade, $all: overall_grade ) from  $grades,
         init( double total = 0; ),
         action( total = total + $loc + $amb + $hos + $ser + $all + $all; ),
         reverse( total = total - ( $loc + $amb + $hos + $ser + $all + $all ); ),
         result( new Double( total / 10 ) ) )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for grade compatibility for restaurant: " + $rest_id + ", [ " + new Double($total/2) + " ]");
		insert(new RestaurantGrade($rest_id, new Double($total/2)));
end;

rule "Compatibility - Extra 3 working hours"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId )
		$req: RestaurantRequirements( userId == loggedInUserId )
		$restaurant: Restaurant( $rest_id: restaurant_id )
			eval($restaurant.isOpenForNext3Hours($req.getDateTime()) == true )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for extra 3 working hours compatibility for restaurant: " + $rest_id);
		insert(new RestaurantTime($rest_id, @{dateTimePoints}));
end;

rule "Compatibility - Distance score"
	agenda-group "perfect-restaurant"
	salience 1
	when
		$u: User( id == loggedInUserId, $loc: location )
		$req: RestaurantRequirements( userId == loggedInUserId, onFoot == true)
		$places: Map()
		$restaurant: Restaurant( $rest_id: restaurant_id, location memberOf $places.get($loc) )
		$compatibleRest: RestaurantCompatibility( restaurantId == $rest_id )
	then
		System.out.println("Added score for distance compatibility for restaurant: " + $rest_id);
		insert(new RestaurantDistance($rest_id, @{distancePoints}));
end;







// 					******************************************* BASE POINTS *******************************************





rule "Insert base ALCOHOL if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantAlcohol(restaurantId == $rest_id ))
	then
		System.out.println("Base score for ALCOHOL");
		insert(new RestaurantAlcohol($rest_id, @{baseAlcoholPoints}));
end;

rule "Insert base WiFi if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantWiFi(restaurantId == $rest_id ))
	then
		System.out.println("Base score for WiFi");
		insert(new RestaurantWiFi($rest_id, @{baseWifiPoints}));
end;

rule "Insert base TV if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantTV(restaurantId == $rest_id ))
	then
		System.out.println("Base score for TV");
		insert(new RestaurantTV($rest_id, @{baseTvPoints}));
end;

rule "Insert base DISTANCE if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantDistance(restaurantId == $rest_id ))
	then
		System.out.println("Base score for DISTANCE");
		insert(new RestaurantDistance($rest_id, @{baseDistancePoints}));
end;

rule "Insert base MUSIC if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantMusic(restaurantId == $rest_id ))
	then
		System.out.println("Base score for MUSIC");
		insert(new RestaurantMusic($rest_id, @{baseMusicPoints}));
end;

rule "Insert base CUISINE if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantCuisine(restaurantId == $rest_id ))
	then
		System.out.println("Base score for CUISINE");
		insert(new RestaurantCuisine($rest_id, @{baseCuisinePoints}));
end;

rule "Insert base 3+HOURS if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantTime(restaurantId == $rest_id ))
	then
		System.out.println("Base score for 3+ HOURS");
		insert(new RestaurantTime($rest_id, @{baseDateTimePoints}));
end;

rule "Insert base SMOKING AREA if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantSmoking(restaurantId == $rest_id ))
	then
		System.out.println("Base score for SMOKING");
		insert(new RestaurantSmoking($rest_id, @{baseSmokingPoints}));
end;

rule "Insert base AMBIENT if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantAmbient(restaurantId == $rest_id ))
	then
		System.out.println("Base score for AMBIENT");
		insert(new RestaurantAmbient($rest_id, @{baseAmbientPoints}));
end;

rule "Insert base PRICE RANGE if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantPriceRange(restaurantId == $rest_id ))
	then
		System.out.println("Base score for PRICE RANGE");
		insert(new RestaurantPriceRange($rest_id, @{basePriceRangePoints}));
end;

rule "Insert base GARDEN if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantGarden(restaurantId == $rest_id ))
	then
		System.out.println("Base score for GARDEN");
		insert(new RestaurantGarden($rest_id, @{baseGardenPoints}));
end;

rule "Insert base PARKING if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantParking(restaurantId == $rest_id ))
	then
		System.out.println("Base score for PARKING");
		insert(new RestaurantParking($rest_id, @{baseParkingPoints}));
end;

rule "Insert base GRADE if not other"
	agenda-group "perfect-restaurant"
	salience 0
	when
		$compatibleRest: RestaurantCompatibility( $rest_id: restaurantId )
		not (RestaurantGrade(restaurantId == $rest_id ))
	then
		System.out.println("Base score for GRADE: 0");
		insert(new RestaurantGrade($rest_id, 0));
end;

end template