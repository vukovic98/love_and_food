package rules;

import com.ftn.uns.ac.rs.love_and_food.model.User;
import com.ftn.uns.ac.rs.love_and_food.model.Restaurant;
import com.ftn.uns.ac.rs.love_and_food.event.FailedLoginEvent;
import com.ftn.uns.ac.rs.love_and_food.model.enums.Location;
import com.ftn.uns.ac.rs.love_and_food.model.enums.PriceRange;
import com.ftn.uns.ac.rs.love_and_food.model.enums.Cuisine;

import java.util.Set;

/* LOVE PART */

query "getAllUsers"
    $user: User()
end

query "getAllMatches"
    $match: Match()
end

// dobavi sve po prosledjenom tipu licnosti
query "getAllUsersByPersonality"(String personalityType)
	$users: User(personalityTraits.contains(personalityType.toUpperCase()))
end;

query "getAllUsersWithRatingAbove"(double value)
	accumulate(
		User($u: this) and
		$userRating: Number(doubleValue > value) from accumulate (
			Match(soulmate == $u, $rating: rating),
			average($rating)
		),
		$users: collectSet($u)
	)
end;

query "getAllUsersWithRatingBelow"(double value)
	accumulate(
		User($u: this) and
		$userRating: Number(doubleValue < value) from accumulate (
			Match(soulmate == $u, $rating: rating),
			average($rating)
		),
		$users: collectSet($u)
	)
end;

query "getAllUsersWithRatingInRange"(double min, double max)
	accumulate(
		User($u: this) and
		$userRating: Number(doubleValue < max, doubleValue > min) from accumulate (
			Match(soulmate == $u, $rating: rating),
			average($rating)
		),
		$users: collectSet($u)
	)
end;

query "getAllUsersWhoMatchedAtLeast"(int times)
	accumulate(
		User($u1: this) and
		User($u2: this) and
		accumulate(
			Match($m1: this, initiator == $u1, soulmate == $u2) and
			Match($m2: this, initiator == $u2, soulmate == $u1),
			$match1: collectList($m1),
			$match2: collectList($m2)
		) and eval($match1.size() + $match2.size() >= times),
		$users: collectSet($u1)
	)
end;


/*	FOOD PART	*/

query "getAllRestaurants"
	$restaurant: Restaurant()
end;

query "getRestaurantsByName"(String restName)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()))
end;

query "getRestaurantsByLocation"(Location loc)
	$restaurant: Restaurant(location == loc)
end;

query "getRestaurantsByPrice"(PriceRange price)
	$restaurant: Restaurant(priceRange == price)
end;

query "getRestaurantsByCuisine"(Cuisine c)
	$restaurant: Restaurant(c memberOf cuisine)
end;

query "getRestaurantsByNameAndLocation"(String restName, Location l)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && location == l)
end;

query "getRestaurantsByNameAndLocationAndCuisine"(String restName, Location l, Cuisine c)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && location == l && c memberOf cuisine)
end;

query "getRestaurantsByNameAndLocationAndPrice"(String restName, Location l, PriceRange p)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && location == l && priceRange == p)
end;

query "getRestaurantsByNameAndPrice"(String restName, PriceRange p)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && priceRange == p)
end;

query "getRestaurantsByNameAndCuisine"(String restName, Cuisine c)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && c memberOf cuisine)
end;

query "getRestaurantsByLocationAndPrice"(Location l, PriceRange p)
	$restaurant: Restaurant(location == l && priceRange == p)
end;

query "getRestaurantsByLocationAndCuisine"(Location l, Cuisine c)
	$restaurant: Restaurant(location == l && c memberOf cuisine)
end;

query "getRestaurantsByLocationAndPriceAndCuisine"(Location l, PriceRange p, Cuisine c)
	$restaurant: Restaurant(location == l && priceRange == p && c memberOf cuisine)
end;

query "getRestaurantsByPriceAndCuisine"(PriceRange p, Cuisine c)
	$restaurant: Restaurant(priceRange == p && c memberOf cuisine)
end;

query "getRestaurantsByNameAndPriceAndCuisine"(String restName, PriceRange p, Cuisine c)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && priceRange == p && c memberOf cuisine)
end;

query "getRestaurantsByAll"(String restName, Location l, PriceRange p, Cuisine c)
	$restaurant: Restaurant(name.toLowerCase().contains(restName.toLowerCase()) && location == l && priceRange == p && c memberOf cuisine)
end;
